<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(SolutionDir)MADAM.Core\bin\$(ConfigurationName)\MADAM.Core.dll" #>
<#@ assembly name="$(SolutionDir)packages\EntityFramework.5.0.0\lib\net45\EntityFramework.dll" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="MADAM.Core.Models" #>

<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using MADAM.Core.Models;

namespace <#= GetProjectName() #>.Models
{
    public partial class <#= GetProjectName() #>Context : ContextBase
    {
        public <#= GetProjectName() #>Context()
        {
        }

<#
    foreach (var type in GetThingTypes())
    {
#>
		public IList<<#= type #>> <#= type #>s;
<#
    }
#>
	}
}

<#+
private string GetProjectName()
{
	IServiceProvider serviceProvider = (IServiceProvider)Host;
    DTE dte = (DTE)serviceProvider.GetService(typeof(DTE));
    var item = dte.Solution.FindProjectItem(Host.TemplateFile);
    if (item != null && item.ContainingProject != null)
        return item.ContainingProject.Name;
    return "Unknown";
}

private IEnumerable<string> GetThingTypes()
{
/*
this doesn't work because the T4 tool doesn't have the connection string

	using (var db = new MADAM_Entities())
    {
        foreach (var type in db.ThingTypes.Where(t => t.Module == GetProjectName()))
			yield return type.Name;
	}
*/

	using (SqlConnection connection = new SqlConnection(GetConnectionString()))
    {
		connection.Open();


		// select all relevant types here
	}
	
	yield return "neverMind";
}

private string GetConnectionString()
{
// This is dependent on the modules all being in the same directory as the root project.
// It'd be great if this could be made independent of the folder structure...
	var projectRoot = new DirectoryInfo(Host.ResolvePath("")).Parent.Parent;
	var configFile = projectRoot.FullName + "\\MADAM.Core\\App.config";

	var fileMap = new ExeConfigurationFileMap();
	fileMap.ExeConfigFilename = configFile;
	var config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(fileMap, ConfigurationUserLevel.None);
	return config.ConnectionStrings.ConnectionStrings["MADAM"].ConnectionString;
}

#>